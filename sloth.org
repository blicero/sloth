# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2025-04-01 18:10:44 krylon>
#
#+TAGS: internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

* Sloth
  Sloth aims to be a unified frontend to the package managers used on various
  GNU/Linux distros and other systems (BSD, mainly).
  In the long run, it would be nice if I could track of what operations were
  run at what time (a log, duh!), provide options to roll back to a given
  state, export a list of installed packages (and hopefully config files) and
  re-apply them on another system, as a way of backing up a system or
  deploying a given configuration to several machines.
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 202 :emphasize t
   #+CAPTION: Clock summary at [2025-04-01 Di 17:44]
   | Headline                          | Time   |        |      |      |
   |-----------------------------------+--------+--------+------+------|
   | *Total time*                      | *0:38* |        |      |      |
   |-----------------------------------+--------+--------+------+------|
   | *Sloth*                           | *0:38* |        |      |      |
   | \_  /Components [0/1]/            |        | /0:38/ |      |      |
   | \_    Call package managers [0/1] |        |        | 0:38 |      |
   | \_      To root or not to root    |        |        |      | 0:20 |
   #+END:
** Features
** Platforms [0/6]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
  Support for platforms depends mainly on my ability to test on these,
  obviously. 
*** TODO openSUSE
    I run Tumbleweed on two machines, openSUSE Leap on another, these are a
    high priority for me, obviously.
*** TODO Debian
    I run Debian (and Raspberry Pi OS) on several machines, so I want those
    supported as well.
*** TODO Arch
    Arch was my initial motivation to start this project, because I find Arch's
    pacman to be rather complicated and unintuitive to use.
    I run Arch and Manjaro in a virtual machine each.
*** TODO FreeBSD
    I run FreeBSD on my home server, including a few jails, so I want these to
    work, too.
**** pkg
**** freebsd-update
*** TODO OpenBSD
    I run OpenBSD on an old laptop and in a virtual machine.
**** syspatch / sysupgrade
**** pkg_add/del/etc
*** TODO [#E] pkgsrc
    Maybe. It's not a priority, though.
** Components [0/1]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
*** Probe [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    The Probe aims to determine what system we are running on.
*** Database [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    :END:
    I'm going to use a database for logging what the application did in a
    machine-readable form.
    What data do I want to store, and how do I model it? Should I defer this
    until I have some insight into what I actually *do*?
*** Call package managers [0/1]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2025-04-01 Di 18:10]
    CLOCK: [2025-04-01 Di 17:26]--[2025-04-01 Di 17:44] =>  0:18
    :END:
    I would like to use a simple class hierarchy for this, with an abstract
    base class to define the interface and a subclass per package manager.
    Most likely they will just run the host system's package manager in an
    external process.
**** TODO To root or not to root
     :LOGBOOK:
     CLOCK: [2025-04-01 Di 15:24]--[2025-04-01 Di 15:44] =>  0:20
     :END:
     I would like to handle not running not as root gracefully, calling sudo
     or doas as a fallback. Which would require detecting if we can use either
     of these. Or systemd-run0, but I have zero experience with that, so I
     don't consider it a priority.
     1. os.getuid() for the UID
     2. shutil.which() to check if a command is available
     3. subprocess.run() to execute a command.

