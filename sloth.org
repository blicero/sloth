# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2025-04-10 20:15:48 krylon>
#
#+TAGS: internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

* Sloth [7/13]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
  Sloth aims to be a unified frontend to the package managers used on various
  GNU/Linux distros and other systems (BSD, mainly).
  In the long run, it would be nice if I could track of what operations were
  run at what time (a log, duh!), provide options to roll back to a given
  state, export a list of installed packages (and hopefully config files) and
  re-apply them on another system, as a way of backing up a system or
  deploying a given configuration to several machines.
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 202 :emphasize t
   #+CAPTION: Clock summary at [2025-04-10 Do 20:15]
   | Headline                               | Time      |         |       |      |
   |----------------------------------------+-----------+---------+-------+------|
   | *Total time*                           | *1d 1:49* |         |       |      |
   |----------------------------------------+-----------+---------+-------+------|
   | *Sloth [7/13]*                         | *1d 1:49* |         |       |      |
   | \_  /Features [2/4]/                   |           | /0:04/  |       |      |
   | \_    Fused refresh-upgrade            |           |         |  0:04 |      |
   | \_  /Platforms [4/7]/                  |           | /4:47/  |       |      |
   | \_    Arch                             |           |         |  0:31 |      |
   | \_    Fedora / RHEL                    |           |         |  2:26 |      |
   | \_    FreeBSD [0/0]                    |           |         |  1:50 |      |
   | \_  /Components [1/2]/                 |           | /20:58/ |       |      |
   | \_    Bucket list [0/1]                |           |         |  0:44 |      |
   | \_      Use the damn database already! |           |         |       | 0:44 |
   | \_    Call package managers [1/1]      |           |         | 16:35 |      |
   | \_      Parsing output or interfacing? |           |         |       | 7:50 |
   | \_      To root or not to root         |           |         |       | 0:20 |
   | \_    Shell [0/0]                      |           |         |  0:52 |      |
   | \_    Config [0/0]                     |           |         |  2:47 |      |
   #+END:
** Features [2/4]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** DONE Fused refresh-upgrade
    CLOSED: [2025-04-10 Do 19:12]
    :LOGBOOK:
    CLOCK: [2025-04-10 Do 19:08]--[2025-04-10 Do 19:12] =>  0:04
    :END:
    I would like to add an operation that refreshes the local package cache,
    checks if there are any pending updates, and if so, installs them right
    away, in one command.
*** DONE Check if package cache is up to date
    CLOSED: [2025-04-10 Do 19:12]
    Some package managers, like zypper or dnf, automatically check the age of
    their local package database and do a refresh if they think it is needed.
    Others, notably APT, don't, I would like to automatically check the age of
    the local cache and prompt the user if they want a refresh when performing
    an operation.
*** TODO [#E] Automatically say yes
    Would be nice if I could make this a configurable option!
*** TODO Audit
    Some package managers (dnf, pkg on FreeBSD) can check the installed
    packages against a vulnerability database and point out any vulnerable
    packages.
** Platforms [4/7]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   Support for platforms depends mainly on my ability to test on these,
   obviously.
*** DONE openSUSE
    CLOSED: [2025-04-05 Sa 15:37]
    I run Tumbleweed on two machines, openSUSE Leap on another, these are a
    high priority for me, obviously.
*** DONE Debian
    CLOSED: [2025-04-05 Sa 15:37]
    I run Debian (and Raspberry Pi OS) on several machines, so I want those
    supported as well.
*** DONE Arch
    CLOSED: [2025-04-05 Sa 17:36]
    :LOGBOOK:
    CLOCK: [2025-04-05 Sa 16:25]--[2025-04-05 Sa 16:37] =>  0:12
    CLOCK: [2025-04-05 Sa 15:38]--[2025-04-05 Sa 15:57] =>  0:19
    :END:
    Arch was my initial motivation to start this project, because I find Arch's
    pacman to be rather complicated and unintuitive to use.
    I run Arch and Manjaro in a virtual machine each.
*** DONE Fedora / RHEL
    CLOSED: [2025-04-07 Mo 18:33]
    :LOGBOOK:
    CLOCK: [2025-04-07 Mo 17:33]--[2025-04-07 Mo 18:33] =>  1:00
    CLOCK: [2025-04-07 Mo 08:27]--[2025-04-07 Mo 08:46] =>  0:19
    CLOCK: [2025-04-05 Sa 20:50]--[2025-04-05 Sa 21:52] =>  1:02
    CLOCK: [2025-04-05 Sa 18:05]--[2025-04-05 Sa 18:10] =>  0:05
    :END:
    Parsing the output of dnf is rather tricky, I think, but it turns out that
    dnf - conveniently enough - is itself written in Python. So interfacing
    should not be too hard.
    [2025-04-07 Mo 18:30]
    It turns out that Rocky Linux (and thusly probably all other RHEL-ish
    systems) is too much of a hassle right now to get working, because several
    severly outdated components, including python itself and sqlite.
    Fedora is no problem, but RHEL and its clones are off the table for now.
*** TODO FreeBSD [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2025-04-07 Mo 19:08]--[2025-04-07 Mo 20:26] =>  1:18
    CLOCK: [2025-04-07 Mo 18:34]--[2025-04-07 Mo 19:06] =>  0:32
    :END:
    I run FreeBSD on my home server, including a few jails, so I want these to
    work, too.
    FreeBSD is going to be little more tricky, because I have two different
    programs to deal with, freebsd-update for the base system, and pkg for the
    3rd-party packages.
    Oh, and jails, too. As I happen to run FreeBSD on my home server and some
    jails, too, I want to support this setup as well.
**** pkg
**** freebsd-update
**** jails
*** TODO OpenBSD
    I run OpenBSD on an old laptop and in a virtual machine.
**** syspatch / sysupgrade
**** pkg_add/del/etc
*** TODO [#E] pkgsrc
    Maybe. It's not a priority, though.
** Components [1/2]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
*** Bucket list [0/1]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
**** TODO Use the damn database already!
     :LOGBOOK:
     CLOCK: [2025-04-09 Mi 18:30]--[2025-04-09 Mi 18:40] =>  0:10
     CLOCK: [2025-04-07 Mo 21:15]--[2025-04-07 Mo 21:49] =>  0:34
     :END:
     This was after all what made me start the whole thing, I wanted to avoid
     checking for updates over and over, being forgetful and stuff.
*** Probe [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    The Probe aims to determine what system we are running on.
*** Database [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    :END:
    I'm going to use a database for logging what the application did in a
    machine-readable form.
    What data do I want to store, and how do I model it? Should I defer this
    until I have some insight into what I actually *do*?
*** Call package managers [1/1]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2025-04-08 Di 16:41]--[2025-04-08 Di 17:05] =>  0:24
    CLOCK: [2025-04-08 Di 12:30]--[2025-04-08 Di 12:35] =>  0:05
    CLOCK: [2025-04-03 Do 20:32]--[2025-04-03 Do 21:57] =>  1:25
    CLOCK: [2025-04-03 Do 17:40]--[2025-04-03 Do 18:34] =>  0:54
    CLOCK: [2025-04-02 Mi 17:23]--[2025-04-02 Mi 18:55] =>  1:32
    CLOCK: [2025-04-02 Mi 09:33]--[2025-04-02 Mi 10:58] =>  1:25
    CLOCK: [2025-04-01 Di 18:10]--[2025-04-01 Di 20:32] =>  2:22
    CLOCK: [2025-04-01 Di 17:26]--[2025-04-01 Di 17:44] =>  0:18
    :END:
    I would like to use a simple class hierarchy for this, with an abstract
    base class to define the interface and a subclass per package manager.
    Most likely they will just run the host system's package manager in an
    external process.
**** Parsing output or interfacing?
     :LOGBOOK:
     CLOCK: [2025-04-05 Sa 15:10]--[2025-04-05 Sa 15:23] =>  0:13
     CLOCK: [2025-04-05 Sa 14:35]--[2025-04-05 Sa 14:43] =>  0:08
     CLOCK: [2025-04-04 Fr 23:40]--[2025-04-05 Sa 00:21] =>  0:41
     CLOCK: [2025-04-04 Fr 17:55]--[2025-04-04 Fr 23:37] =>  5:42
     CLOCK: [2025-04-04 Fr 17:26]--[2025-04-04 Fr 17:34] =>  0:08
     CLOCK: [2025-04-04 Fr 16:36]--[2025-04-04 Fr 17:25] =>  0:49
     CLOCK: [2025-04-03 Do 21:57]--[2025-04-03 Do 22:06] =>  0:09
     :END:
     The next step seems clear - instead of just forwarding the command(s) to
     the system, I could (especially when searching) capture and process the
     output of the command.
     If the package manager had some kind of interface we can use from Python
     instead of running a command, that would be even nicer. And on Debian, it
     exists!
**** DONE To root or not to root
     CLOSED: [2025-04-08 Di 12:30]
     :LOGBOOK:
     CLOCK: [2025-04-01 Di 15:24]--[2025-04-01 Di 15:44] =>  0:20
     :END:
     I would like to handle not running not as root gracefully, calling sudo
     or doas as a fallback. Which would require detecting if we can use either
     of these. Or systemd-run0, but I have zero experience with that, so I
     don't consider it a priority.
     1. os.getuid() for the UID
     2. shutil.which() to check if a command is available
     3. subprocess.run() to execute a command.
*** Shell [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2025-04-10 Do 19:50]--[2025-04-10 Do 20:15] =>  0:25
    CLOCK: [2025-04-10 Do 19:07]--[2025-04-10 Do 19:08] =>  0:01
    CLOCK: [2025-04-08 Di 17:06]--[2025-04-08 Di 17:32] =>  0:26
    :END:
*** Config [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2025-04-10 Do 19:15]--[2025-04-10 Do 19:50] =>  0:35
    CLOCK: [2025-04-09 Mi 21:50]--[2025-04-09 Mi 22:27] =>  0:37
    CLOCK: [2025-04-09 Mi 18:24]--[2025-04-09 Mi 18:29] =>  0:05
    CLOCK: [2025-04-08 Di 23:10]--[2025-04-08 Di 23:46] =>  0:36
    CLOCK: [2025-04-08 Di 20:44]--[2025-04-08 Di 21:38] =>  0:54
    :END:
    Okay, time to think about a configuration format.
    I'm gonna go with TOML, because it has good library support, and I have no
    particular reason against it.
    What settings do I want to support?
    - [X] Interval to refresh the local package cache
    - [ ] Automatically say yes?
    - [ ] When removing a package, shall we remove dependencies as well?
    - [X] Automatically refresh the local cache?

